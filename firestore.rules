rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isSignedIn() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isValidUser() {
      return request.resource.data.keys().hasAll(['email', 'name']) &&
             request.resource.data.email is string &&
             request.resource.data.name is string;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow create: if isSignedIn() && isValidUser();
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Courses collection
    match /courses/{courseId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Documents collection
    match /documents/{documentId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Tests collection
    match /tests/{testId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
      
      // Questions subcollection
      match /questions/{questionId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
      }
    }
    
    // Video rules
    match /videos/{videoId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
  }
}
